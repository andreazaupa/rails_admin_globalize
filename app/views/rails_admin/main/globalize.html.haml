= javascript_include_tag "rails_admin/custom/rails_admin_globalize.js"
= stylesheet_link_tag "rails_admin/custom/rails_admin_globalize.css"

%h2= I18n.translate("admin.actions.globalize.title")
%p= raw I18n.translate("admin.actions.globalize.subtitle", :locale_name => "<strong>#{I18n.locale}</strong>".upcase)

- translations_field = @object.translated_attributes.keys.collect(&:to_sym)

- default_locale = I18n.locale
- target_locale = @target_locale

- rails_admin_proxy = @object.class.rails_admin
- rails_admin_fields = rails_admin_proxy.visible_fields.inject({}) { |a,f| a[f.name] = f if translations_field.include?(f.name) ; a }

= form_for @object, :url => rails_admin.globalize_path(@object.class.to_s.split("::").map(&:underscore).join("~"), @object.id), :html => {:class => 'globalize-form'} do |form|
  = select_tag 'target_locale', options_for_select(  @available_locales, @target_locale ), :id => "target_locale_select", :"data-target-url" => rails_admin.globalize_path(@object.class.to_s.split("::").map(&:underscore).join("~"), @object.id)

  - rails_admin_fields.keys.each do |t|
    %h5= t
    .row-fluid
      .span4
        .controls.well{ :class => "#{rails_admin_fields[t].type}_type" }
          .original-content= raw @object.send(t)
      .span8
        - I18n.with_locale target_locale do
          = render :partial => "globalize_field", :locals => {:object => @object, :form => form, :field => rails_admin_fields[t]}

  - @associated_translations = @object.class.reflect_on_all_associations(:has_many).collect{|r| r.name if r.klass.respond_to?(:translation_options) }.compact
  - @associated_translations += @object.class.reflect_on_all_associations(:has_one).collect{|r| r.name if r.klass.respond_to?(:translation_options) }.compact


  - @associated_translations =  @object.associated_translations if @object.respond_to?("associated_translations")
  - @associated_translations = @associated_translations.compact.flatten.uniq
  - if @associated_translations
    - @associated_translations.each do |association|

      - collection = @object.send(association)
      - if collection.present?
        - collection = [collection].flatten.uniq
        - translations_field = collection.first.translated_attributes.keys.collect(&:to_sym)
        - rails_admin_proxy = collection.first.class.rails_admin
        - rails_admin_fields = rails_admin_proxy.visible_fields.inject({}) { |a,f|  a[f.name] = f if translations_field.include?(f.name) ;a  }

        = form.fields_for association.to_sym do |subform|
          - obj = subform.object
          %h4= raw I18n.translate("admin.actions.globalize.associated_translations", :associated_model => "<strong>#{rails_admin_proxy.label_plural}</strong>")
          - rails_admin_fields.each do |t, field|
            %h5= t
            .row-fluid
              .span4
                .controls.well{ :class => "#{rails_admin_fields[t].type}_type" }
                  .original-content= raw obj.send(t)
              .span8
                - I18n.with_locale target_locale do
                  = render :partial => "globalize_field", :locals => {:field => field, :object => obj, :form => subform}

          - @sub_associated_translations = collection.first.class.associated_model_to_globalize rescue nil

          - if @sub_associated_translations.present?

            - if @sub_associated_translations[:has_many].present?
              - @sub_associated_translations[:has_many].each do |has_many_associated_model|

                - associated_model = obj.send(has_many_associated_model)
                - associated_translations_field = associated_model.first.translated_attributes.keys.collect(&:to_sym)
                - associated_rails_admin_proxy = associated_model.first.class.rails_admin
                - associated_rails_admin_fields = associated_rails_admin_proxy.visible_fields.inject({}) { |a,f|  a[f.name] = f if associated_translations_field.include?(f.name) ;a  }

                = subform.fields_for has_many_associated_model.to_sym do |subsubform|
                  - sub_obj = subsubform.object
                  - associated_rails_admin_fields.each do |t, field|
                    %h5= t
                    .row-fluid
                      .span4
                        .controls.well{ :class => "#{associated_rails_admin_fields[t].type}_type" }
                          .original-content= raw sub_obj.send(t)
                      .span8
                        - I18n.with_locale target_locale do
                          = render :partial => "globalize_field", :locals => {:field => field, :object => sub_obj, :form => subsubform}

            - if @sub_associated_translations[:has_one].present?
              - @sub_associated_translations[:has_one].each do |has_one_associated_model|
                = # TODO


  %input{:type => :hidden, :name => 'return_to', :value => (params[:return_to].presence || request.referer)}
  .form-actions
    %button.btn.btn-primary{:type => "submit", :name => "_save", :'data-disable-with' => t("admin.form.save")}
      %i.icon-white.icon-ok
      = t("admin.form.save")
    %span.extra_buttons
      - if authorized? :globalize, @abstract_model
        %button.btn.btn-info{:type => "submit", :name => "_add_edit", :'data-disable-with' => t("admin.form.save_and_edit")}
          = t("admin.form.save_and_edit")
      %button.btn{:type => "submit", :name => "_continue", :'data-disable-with' => t("admin.form.cancel")}
        %i.icon-remove
        = t("admin.form.cancel")
