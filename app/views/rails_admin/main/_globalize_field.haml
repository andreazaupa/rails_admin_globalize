:ruby
  in_error = object.errors.present? && object.errors.messages.keys.include?(field.method_name)

.control-group{:class=>("#{field.css_class} #{field.type}_type #{'error' if in_error}")}
  .controls{:class => field.type.eql?('text') ? 'well' : ''}
    - if [:text, :ck_editor, :code_mirror, :wysihtml5].include? field.type
      :ruby
        if field.type == :ck_editor
          richtext = 'ckeditor'
          js_data = {
            :jspath => field.location ? field.location : field.base_location + "ckeditor.js",
            :base_location => field.base_location,
            :options => {
              :customConfig => field.config_js ? field.config_js : field.base_location + "config.js"
            }
          }
        elsif field.type == :code_mirror
          richtext = 'codemirror'
          js_data = {
            :csspath => field.css_location,
            :jspath => field.js_location,
            :options => field.config,
            :locations => field.assets
          }
        elsif field.type == :wysihtml5
          richtext = 'bootstrap-wysihtml5'
          js_data = {
            :csspath => field.css_location,
            :jspath => field.js_location,
            :config_options => field.config_options.to_json
          }
        elsif field.respond_to?(:rich) && field.type == :rich
          richtext = 'rich'
        else
          richtext = false
          js_data = {}
        end

      = form.text_area field.method_name, field.html_attributes.reverse_merge(:data => { :richtext => richtext, :options => js_data.to_json }).reverse_merge(:value => object.send(field.name))

    - elsif field.type == :rich_editor
      = render :partial => "rails_admin/main/form_rich_text", :locals => { form: form, field: field }

    - elsif field.type == :carrierwave || field.type == :jcrop
      = render :partial => "file_upload", :locals => { form: form, field: field } #if false
      =# link_to("EDIT", rails_admin.edit_path(object.class.to_s.gsub("::","~").underscore,object.id), :target=>"_blank")

    - elsif field.partial.present?
      = render :partial => "rails_admin/main/#{field.partial}", :locals => { form: form, field: field }

    - else
      = form.send(field.view_helper, field.method_name, field.html_attributes)

    - if in_error
      - I18n.with_locale @current_locale do
        = content_tag(:span, "#{object.errors.messages[field.method_name]}", :class => 'help-inline', :style=>"color: #B94A48").html_safe
